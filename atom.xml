<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2021-03-05T03:42:13.141Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>ssh连接githubPage</title>
    <link href="http://example.com/2021/03/05/%E7%94%A8ssh%E6%96%B9%E5%BC%8F%E8%BF%9E%E6%8E%A5github/"/>
    <id>http://example.com/2021/03/05/%E7%94%A8ssh%E6%96%B9%E5%BC%8F%E8%BF%9E%E6%8E%A5github/</id>
    <published>2021-03-05T02:43:13.977Z</published>
    <updated>2021-03-05T03:42:13.141Z</updated>
    
    <content type="html"><![CDATA[<h3 id="关于SSH"><a href="#关于SSH" class="headerlink" title="关于SSH"></a>关于SSH</h3><p><em>使用 SSH 协议可以连接远程服务器和服务并向它们验证。 利用 SSH 密钥可以连接 GitHub，而无需在每次访问时都提供用户名和个人访问令牌。</em></p><h3 id="用git生成ssh秘钥pairs"><a href="#用git生成ssh秘钥pairs" class="headerlink" title="用git生成ssh秘钥pairs"></a>用git生成ssh秘钥pairs</h3><ul><li><code>$ ssh-keygen -t ed25519 -C &quot;username@github.com&quot;</code>,这一条命令就会在.ssh文件夹中生成两个秘钥（带pub后缀的是公钥，另一个是私钥）。</li><li>之后和github连接了之后，.ssh文件夹中还会生成一个<code>kown_hosts</code>文件。<h3 id="ssh私钥添加到SSH-agent中"><a href="#ssh私钥添加到SSH-agent中" class="headerlink" title="ssh私钥添加到SSH-agent中"></a>ssh私钥添加到SSH-agent中</h3></li><li>启动ssh-agent<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt; start the ssh-agent in the background</span><br><span class="line">$ eval &#96;ssh-agent -s&#96;</span><br><span class="line">&gt; Agent pid 59566</span><br><span class="line">&#96;&#96;&#96;  </span><br><span class="line">- 将私钥添加到agent中  </span><br></pre></td></tr></table></figure>$ ssh-add ~/.ssh/id_ed25519<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt; 这样每次都要开agent并注入私钥，并不比直接输入账号密码简单，所以之后有一个方法，在开机就把私钥注入到agent中，免得手动配置了。  </span><br><span class="line">### ssh公钥新增到github中</span><br><span class="line">- 打开github-&gt;点击头像-&gt;settings-&gt;SSH &amp; GPG keys  </span><br><span class="line">- 复制.ssh中公钥内容，复制到ssh key中并保存。  </span><br><span class="line">- 测试：&#96;ssh -vT git@github.com&#96;  </span><br><span class="line"></span><br><span class="line">### 修改root下_config.yml</span><br><span class="line">将_config.yml文件中https方式改成ssh方式 </span><br></pre></td></tr></table></figure>deploy:<br>type: git<br>repo: <a href="https://github.com/">https://github.com/</a><username>/<project><br>example, <a href="https://github.com/hexojs/hexojs.github.io">https://github.com/hexojs/hexojs.github.io</a> //https方式<br>example, <a href="mailto:&#103;&#105;&#116;&#x40;&#103;&#105;&#116;&#x68;&#x75;&#98;&#x2e;&#99;&#111;&#x6d;">&#103;&#105;&#116;&#x40;&#103;&#105;&#116;&#x68;&#x75;&#98;&#x2e;&#99;&#111;&#x6d;</a>:username/username.github.io.git //ssh方式<br>branch: master<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">### 成功</span><br><span class="line">### 优化ssh-agent配置</span><br><span class="line">- 在windows系统自动启动ssh-agent</span><br><span class="line">- 代开git-&gt;etc-&gt;profile,添加下面代码  </span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><pre><code></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;关于SSH&quot;&gt;&lt;a href=&quot;#关于SSH&quot; class=&quot;headerlink&quot; title=&quot;关于SSH&quot;&gt;&lt;/a&gt;关于SSH&lt;/h3&gt;&lt;p&gt;&lt;em&gt;使用 SSH 协议可以连接远程服务器和服务并向它们验证。 利用 SSH 密钥可以连接 GitHub，而无需在</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>用hexo配合github page搭建博客</title>
    <link href="http://example.com/2021/03/05/hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/"/>
    <id>http://example.com/2021/03/05/hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/</id>
    <published>2021-03-05T01:43:28.011Z</published>
    <updated>2021-03-05T02:33:18.988Z</updated>
    
    <content type="html"><![CDATA[<h3 id="安装环境"><a href="#安装环境" class="headerlink" title="安装环境"></a>安装环境</h3><h4 id="1-安装node-js"><a href="#1-安装node-js" class="headerlink" title="1. 安装node.js"></a>1. 安装node.js</h4><h4 id="2-安装git"><a href="#2-安装git" class="headerlink" title="2. 安装git"></a>2. 安装git</h4><h4 id="3-安装hexo-cli，直接去hexo-io官网去按照步骤就可以下载。"><a href="#3-安装hexo-cli，直接去hexo-io官网去按照步骤就可以下载。" class="headerlink" title="3. 安装hexo-cli，直接去hexo.io官网去按照步骤就可以下载。"></a>3. 安装hexo-cli，直接去<code>hexo.io</code>官网去按照步骤就可以下载。</h4><blockquote><p>说明：hexo-cli中包括两个东西：hexo程序和cli，cli是命令行接口的意思，安装之后可以使用hexo命令。</p></blockquote><h3 id="测试hexo"><a href="#测试hexo" class="headerlink" title="测试hexo"></a>测试hexo</h3><ul><li>按照上面的方法安装好hexo后，找到你想要安装hexo的本地文件夹，在文件夹中打开gitbash输入<code>hexo init</code>,这样hexo的文件目录就会拷贝到当前所在文件夹，方便日后管理。</li><li>hexo常用命令：<br><code>hexo clean</code> <code>hexo new fileName</code> <code>hexo g/generate</code> <code>hexo s/server</code> <code>hexo d/deploy</code><blockquote><p>说明：hexo clean作用是清除文件夹中的public包，将之前生成的静态html文件删除：<br>hexo new是在文件夹中source中生成.md后缀的源文件，也可不用这个命令，直接在文件夹中新建.md的文件。<br>hexo g作用是生成静态html文件，hexo d则是把生成的html文件部署到服务器中（至于部署到哪里，在根目录config文件中可以配置，我们这里是到github page中）<br>hexo s作用是将静态文件部署到本地服务器上，目的是可以预览一下 </p></blockquote></li></ul><h3 id="配置github-page"><a href="#配置github-page" class="headerlink" title="配置github page"></a>配置github page</h3><blockquote><p>以前用过wordpress，需要与自己的vps，将博客搭建到vps上，可是因为廉价vps的不稳定性（网络问题，跑路问题……），最终决定用hexo+gitpage。  </p></blockquote><h4 id="1-首先在github建一个项目，格式username-github-io-这个格式的项目会被github识别为page项目。"><a href="#1-首先在github建一个项目，格式username-github-io-这个格式的项目会被github识别为page项目。" class="headerlink" title="1. 首先在github建一个项目，格式username.github.io,这个格式的项目会被github识别为page项目。"></a>1. 首先在github建一个项目，格式<code>username.github.io</code>,这个格式的项目会被github识别为page项目。</h4><blockquote><p>注意：建造这个项目一定是要是个空项目，不要生成readme和CNAME文件，否则在向github中push博客文件的时候会报错！！！</p></blockquote><h4 id="2-在gitbash中运行-npm-install-hexo-deployer-git-save然后在-config-yml文件中配置以下内容。"><a href="#2-在gitbash中运行-npm-install-hexo-deployer-git-save然后在-config-yml文件中配置以下内容。" class="headerlink" title="2. 在gitbash中运行 $ npm install hexo-deployer-git --save然后在_config.yml文件中配置以下内容。"></a>2. 在gitbash中运行 <code>$ npm install hexo-deployer-git --save</code>然后在_config.yml文件中配置以下内容。</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: https:&#x2F;&#x2F;github.com&#x2F;&lt;username&gt;&#x2F;&lt;project&gt;</span><br><span class="line">  # example, https:&#x2F;&#x2F;github.com&#x2F;hexojs&#x2F;hexojs.github.io &#x2F;&#x2F;https方式</span><br><span class="line">  # example, git@github.com:username&#x2F;username.github.io.git &#x2F;&#x2F;ssh方式</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><h4 id="3-配置好之后运行-deploy-g-deploy-d将本地文件目录push到Github项目中。"><a href="#3-配置好之后运行-deploy-g-deploy-d将本地文件目录push到Github项目中。" class="headerlink" title="3. 配置好之后运行 deploy g,deploy d将本地文件目录push到Github项目中。"></a>3. 配置好之后运行 <code>deploy g,deploy d</code>将本地文件目录push到Github项目中。</h4><p>之后，查看username.github.io上的网页是否成功。</p><h4 id="4-成功了之后，如果有自己的域名，可以配置自己的CNAME。"><a href="#4-成功了之后，如果有自己的域名，可以配置自己的CNAME。" class="headerlink" title="4. 成功了之后，如果有自己的域名，可以配置自己的CNAME。"></a>4. 成功了之后，如果有自己的域名，可以配置自己的CNAME。</h4><blockquote><p>这里也有个坑,如果只是在githubpage下的CNAME中填写内容，只能保证一次可用，在之后<code>hexo d</code>时候，CNAME中的内容都会清空，还需要手写，太麻烦了，不可取。<br>解决办法是：在本地博客文件夹source下建一个名为CNAME的文件（不带任何后缀，可以先建一个txt文档，然后把.txt后缀删掉即可）,CNAME写自己的域名，不要加<a href="http://www,写成www.gsserver.top格式即可./">http://www，写成www.gsserver.top格式即可。</a>  </p></blockquote><h2 id="大功告成，开始写博客吧。"><a href="#大功告成，开始写博客吧。" class="headerlink" title="大功告成，开始写博客吧。"></a>大功告成，开始写博客吧。</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;安装环境&quot;&gt;&lt;a href=&quot;#安装环境&quot; class=&quot;headerlink&quot; title=&quot;安装环境&quot;&gt;&lt;/a&gt;安装环境&lt;/h3&gt;&lt;h4 id=&quot;1-安装node-js&quot;&gt;&lt;a href=&quot;#1-安装node-js&quot; class=&quot;headerlink&quot; ti</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>MarkDown入门</title>
    <link href="http://example.com/2021/03/04/MarkDown/"/>
    <id>http://example.com/2021/03/04/MarkDown/</id>
    <published>2021-03-04T01:33:36.687Z</published>
    <updated>2021-03-04T04:45:39.466Z</updated>
    
    <content type="html"><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>markdown是一种轻量级标记语言，文档结尾以 .md或者.markdown结尾。  </p><hr><h3 id="Markdown标题"><a href="#Markdown标题" class="headerlink" title="Markdown标题"></a>Markdown标题</h3><p>Markdown标题有两种格式：  </p><ol><li>分别用=和-标记一级和二级标题，用在需要文字的下方。</li><li>用# 表示标题，一个# 表示一级标题，六个# 表示六级标题，一级最大。</li></ol><hr><h3 id="markdown段落"><a href="#markdown段落" class="headerlink" title="markdown段落"></a>markdown段落</h3><p>  markdown没有特殊的段落格式，直接编写文字就行，换行要在末尾至少连个空格然后回车。</p><ul><li><h4 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h4>常用的分三种：斜体，粗体，和斜粗体，分别用1~3个*将文字包围。  </li><li><h4 id="分割线"><a href="#分割线" class="headerlink" title="分割线"></a>分割线</h4>你可以在一行中用三个以上的星号，减号，底线表示分割线，这一行不能有别的东西，但是符号只见允许空格。</li><li><h4 id="删除线"><a href="#删除线" class="headerlink" title="删除线"></a>删除线</h4>在文字的两端分别些两个波浪线。</li><li><h4 id="下划线"><a href="#下划线" class="headerlink" title="下划线"></a>下划线</h4>通过html中的尖括号U标签来实现。</li><li><h4 id="注-脚"><a href="#注-脚" class="headerlink" title="注 脚"></a>注 脚</h4>[]之间^文字。</li></ul><hr><h3 id="markdown列表"><a href="#markdown列表" class="headerlink" title="markdown列表"></a>markdown列表</h3><ul><li><h4 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h4>  用加号，减号，星号以及后边加一个空格 文字的形式表示。</li><li><h4 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h4>  用数字后跟点.来表示。  </li><li><h4 id="列表嵌套"><a href="#列表嵌套" class="headerlink" title="列表嵌套"></a>列表嵌套</h4>  只需在子列表选项前面添加四个空格即可。  </li></ul><ol><li>第一项：<ul><li>元素1  </li><li>元素2  <h3 id="区块引用"><a href="#区块引用" class="headerlink" title="区块引用"></a>区块引用</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">用&gt;后加一个空格</span><br><span class="line">&gt; 最外层</span><br><span class="line">&gt;&gt; 第一层</span><br><span class="line">&gt;&gt;&gt; 第二层</span><br></pre></td></tr></table></figure><blockquote><p>最外层</p><blockquote><p>第一层</p><blockquote><p>第二层</p></blockquote></blockquote></blockquote><h3 id="代码区块"><a href="#代码区块" class="headerlink" title="代码区块"></a>代码区块</h3></li></ul></li><li>文字中的代码用`包围起来。</li><li>代码块用```<blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public static void main(String[] args)&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote></li><li>代码块也可以用四个空格或者一个制表符<h3 id="markdown中的链接"><a href="#markdown中的链接" class="headerlink" title="markdown中的链接"></a>markdown中的链接</h3></li><li><blockquote><p>[链接名称]（链接地址）<br><a href="blog.gsserver.top">kaiji’s blog</a></p></blockquote></li><li><blockquote><p>&lt;blog.gsserver.top&gt;直接使用链接地址</p></blockquote></li><li><blockquote><p>高级链接：可以用一个变量来指向链接，以后用到再说。</p></blockquote><h3 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h3><blockquote><p><code>![alt 属性文本](图片地址)</code></p></blockquote><h3 id="markdown表格"><a href="#markdown表格" class="headerlink" title="markdown表格"></a>markdown表格</h3>用<code>|</code>分隔单元格，用<code>-</code>分隔表头和其他行。<br><code>-:</code> <code>:-</code> <code>:-:</code>分别表示右对齐，左对齐，居中对齐。<h3 id="高级技巧"><a href="#高级技巧" class="headerlink" title="高级技巧"></a>高级技巧</h3>markdown支持一些html元素：<br><code>&lt;kbd&gt; &lt;b&gt; &lt;i&gt; &lt;em&gt; &lt;sup&gt; &lt;sub&gt; &lt;br&gt;等 </code>  <blockquote><p><code>&lt;kbd&gt;Ctrl&lt;/kbd&gt;+&lt;kbd&gt;Alt&lt;/kbd&gt;+&lt;kbd&gt;Del&lt;/kbd&gt; 重启电脑</code><br><kbd>Ctrl</kbd>+<kbd>Alt</kbd>+<kbd>Del</kbd> 重启电脑</p></blockquote></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h3&gt;&lt;p&gt;markdown是一种轻量级标记语言，文档结尾以 .md或者.markdown结尾。  &lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&quot;Markdown</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>hexo</title>
    <link href="http://example.com/2021/03/03/hexo/"/>
    <id>http://example.com/2021/03/03/hexo/</id>
    <published>2021-03-03T01:32:02.000Z</published>
    <updated>2021-03-03T02:04:08.030Z</updated>
    
    <content type="html"><![CDATA[<p>git svn cvs maven<br>1.git，svn，cvs都是版本控制工具<br>2.git是分布式，每台安装了git的client都是server。svn和cvs是集中式，需要中央服务器。<br>3.cvs比svn老一些。<br>4.maven和其他三个配合使用，主要作用是作为jar包仓库。<br>==============================<br>You have not concluded your merge (MERGE_HEAD exists).<br>Please, commit your changes before you can merge.</p><p>OK. The problem is your previous pull failed to merge automatically and went to conflict state. And the conflict wasn’t resolved properly before the next pull.<br>git pull<br>git push<br>git add/rm [file]<br>git commit<br>git merge –abort<br>git reset –merge<br>git status<br>===============================<br>hexo g<br>hexo s<br>hexo deploy<br>============================<br>i  esc   :wq<br>======================<br>Debug 通常称为调试版本，它包含调试信息，并且不作任何优化，便于程序员调试程序。<br>Release 称为发布版本，它往往是进行了各种优化，使得程序在代码大小和运行速度上都是最优的，以便用户很好地使用。<br>================<br>Git错误提示之：fatal: Not a git repository (or any of the parent directories): .git<br>产生原因：一般是没有初始化git本地版本管理仓库，所以无法执行git命令</p><p>解决方法：操作之前执行以下命令行: git init<br>运行git status查看<br>===============<br>Unable to access ‘<a href="https://github.com/user_name/repository_name/%E2%80%99">https://github.com/user_name/repository_name/’</a>: OpenSSL SSL_read: Connection was reset, errno 10054</p><p>网上看到很多说法，其实你之前配置没问题的话我相信一般是没有问题的，你照着他们说的去做也未必能解决问题。当时查资料倒是看到一个有趣的说法，有关于自己的网络连接，我觉得这种思考是很好的，都可以提供大家的参考。</p><p>我的问题也给大家分享一下吧，希望给大家排坑提供一种思考的可能：<br>我在本地commit之前在Github直接修改了readme.md的内容，导致本地修改记录和Github修改记录冲突，进而报错。<br>其实之前写的的《Git解决文件本地更改的合并覆盖错误》一文中的弊病原因在哪里呢？就是在 New Repository 的时候点了初始化readme.md，这次创建算是一次commit，但你的本地没有这次记录，所以就会冲突，就不能提交，就必须在pull的时候处理新老版本的兼容问题。</p><h1 id="所以处理的方法就是做一下git-pull-origin-master-–allow-unrelated-histories，然后再push即可。"><a href="#所以处理的方法就是做一下git-pull-origin-master-–allow-unrelated-histories，然后再push即可。" class="headerlink" title="所以处理的方法就是做一下git pull origin master –allow-unrelated-histories，然后再push即可。"></a>所以处理的方法就是做一下git pull origin master –allow-unrelated-histories，然后再push即可。</h1><p>GitHub Pages自定义域名后每次hexo d都会失效解决<br>在GitHub Pages设置自定义域名之后，发现每次hexo d 后都会失效，又要重新设置，太麻烦了。</p><p>于是，问了一下牛皮的百度老师</p><p>只要在source 目录添加一个新文件CNAME就好</p><p>CNAME –不带任何后缀，这就是全称，里面写的是你的域名</p><p>然后就ok了。</p><p>怎么push都不用再去GitHub Pages设置了</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;git svn cvs maven&lt;br&gt;1.git，svn，cvs都是版本控制工具&lt;br&gt;2.git是分布式，每台安装了git的client都是server。svn和cvs是集中式，需要中央服务器。&lt;br&gt;3.cvs比svn老一些。&lt;br&gt;4.maven和其他三个配合使用</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://example.com/2021/03/03/hello-world/"/>
    <id>http://example.com/2021/03/03/hello-world/</id>
    <published>2021-03-02T23:55:16.655Z</published>
    <updated>2021-03-02T23:55:16.656Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
</feed>
