{"meta":{"title":"Hexo","subtitle":"","description":"","author":"John Doe","url":"http://example.com","root":"/"},"pages":[],"posts":[{"title":"ssh连接githubPage","slug":"用ssh方式连接github","date":"2021-03-05T02:43:13.977Z","updated":"2021-03-05T03:34:58.602Z","comments":true,"path":"2021/03/05/用ssh方式连接github/","link":"","permalink":"http://example.com/2021/03/05/%E7%94%A8ssh%E6%96%B9%E5%BC%8F%E8%BF%9E%E6%8E%A5github/","excerpt":"","text":"关于SSH使用 SSH 协议可以连接远程服务器和服务并向它们验证。 利用 SSH 密钥可以连接 GitHub，而无需在每次访问时都提供用户名和个人访问令牌。 用git生成ssh秘钥pairs $ ssh-keygen -t ed25519 -C &quot;username@github.com&quot;,这一条命令就会在.ssh文件夹中生成两个秘钥（带pub后缀的是公钥，另一个是私钥）。 之后和github连接了之后，.ssh文件夹中还会生成一个kown_hosts文件。ssh私钥添加到SSH-agent中 启动ssh-agent12345&gt; start the ssh-agent in the background$ eval &#96;ssh-agent -s&#96;&gt; Agent pid 59566&#96;&#96;&#96; - 将私钥添加到agent中 $ ssh-add ~/.ssh/id_ed2551912345678&gt; 这样每次都要开agent并注入私钥，并不比直接输入账号密码简单，所以之后有一个方法，在开机就把私钥注入到agent中，免得手动配置了。 ### ssh公钥新增到github中- 打开github-&gt;点击头像-&gt;settings-&gt;SSH &amp; GPG keys - 复制.ssh中公钥内容，复制到ssh key中并保存。 - 测试：&#96;ssh -vT git@github.com&#96; ### 修改root下_config.yml将_config.yml文件中https方式改成ssh方式 deploy:type: gitrepo: https://github.com//example, https://github.com/hexojs/hexojs.github.io //https方式example, &#103;&#x69;&#x74;&#64;&#103;&#105;&#x74;&#x68;&#117;&#x62;&#46;&#x63;&#111;&#109;:username/username.github.io.git //ssh方式branch: master12345### 成功### 优化ssh-agent配置- 在windows系统自动启动ssh-agent- 代开git-&gt;etc-&gt;profile,添加下面代码 env=/.ssh/agent.envagent_load_env () { test -f “$env” &amp;&amp; . “$env” &gt;| /dev/null ; }agent_start () { (umask 077; ssh-agent &gt;| “$env”) . env=/.ssh/agent.envagent_load_env () { test -f “$env” &amp;&amp; . “$env” &gt;| /dev/null ; }agent_start () { (umask 077; ssh-agent &gt;| “$env”) . “$env” &gt;| /dev/null ; }agent_load_env if [ ! “$SSH_AUTH_SOCK” ] || [ $agent_run_state = 2 ]; then agent_start ssh-addelif [ “$SSH_AUTH_SOCK” ] &amp;&amp; [ $agent_run_state = 1 ]; then ssh-addfiunset env if [ ! “$SSH_AUTH_SOCK” ] || [ $agent_run_state = 2 ]; then agent_start ssh-addelif [ “$SSH_AUTH_SOCK” ] &amp;&amp; [ $agent_run_state = 1 ]; then ssh-addfiunset env","categories":[],"tags":[]},{"title":"用hexo配合github page搭建博客","slug":"hexo搭建博客","date":"2021-03-05T01:43:28.011Z","updated":"2021-03-05T02:33:18.988Z","comments":true,"path":"2021/03/05/hexo搭建博客/","link":"","permalink":"http://example.com/2021/03/05/hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/","excerpt":"","text":"安装环境1. 安装node.js2. 安装git3. 安装hexo-cli，直接去hexo.io官网去按照步骤就可以下载。 说明：hexo-cli中包括两个东西：hexo程序和cli，cli是命令行接口的意思，安装之后可以使用hexo命令。 测试hexo 按照上面的方法安装好hexo后，找到你想要安装hexo的本地文件夹，在文件夹中打开gitbash输入hexo init,这样hexo的文件目录就会拷贝到当前所在文件夹，方便日后管理。 hexo常用命令：hexo clean hexo new fileName hexo g/generate hexo s/server hexo d/deploy 说明：hexo clean作用是清除文件夹中的public包，将之前生成的静态html文件删除：hexo new是在文件夹中source中生成.md后缀的源文件，也可不用这个命令，直接在文件夹中新建.md的文件。hexo g作用是生成静态html文件，hexo d则是把生成的html文件部署到服务器中（至于部署到哪里，在根目录config文件中可以配置，我们这里是到github page中）hexo s作用是将静态文件部署到本地服务器上，目的是可以预览一下 配置github page 以前用过wordpress，需要与自己的vps，将博客搭建到vps上，可是因为廉价vps的不稳定性（网络问题，跑路问题……），最终决定用hexo+gitpage。 1. 首先在github建一个项目，格式username.github.io,这个格式的项目会被github识别为page项目。 注意：建造这个项目一定是要是个空项目，不要生成readme和CNAME文件，否则在向github中push博客文件的时候会报错！！！ 2. 在gitbash中运行 $ npm install hexo-deployer-git --save然后在_config.yml文件中配置以下内容。123456deploy: type: git repo: https:&#x2F;&#x2F;github.com&#x2F;&lt;username&gt;&#x2F;&lt;project&gt; # example, https:&#x2F;&#x2F;github.com&#x2F;hexojs&#x2F;hexojs.github.io &#x2F;&#x2F;https方式 # example, git@github.com:username&#x2F;username.github.io.git &#x2F;&#x2F;ssh方式 branch: master 3. 配置好之后运行 deploy g,deploy d将本地文件目录push到Github项目中。之后，查看username.github.io上的网页是否成功。 4. 成功了之后，如果有自己的域名，可以配置自己的CNAME。 这里也有个坑,如果只是在githubpage下的CNAME中填写内容，只能保证一次可用，在之后hexo d时候，CNAME中的内容都会清空，还需要手写，太麻烦了，不可取。解决办法是：在本地博客文件夹source下建一个名为CNAME的文件（不带任何后缀，可以先建一个txt文档，然后把.txt后缀删掉即可）,CNAME写自己的域名，不要加http://www，写成www.gsserver.top格式即可。 大功告成，开始写博客吧。","categories":[],"tags":[]},{"title":"MarkDown入门","slug":"MarkDown","date":"2021-03-04T01:33:36.687Z","updated":"2021-03-04T04:45:39.466Z","comments":true,"path":"2021/03/04/MarkDown/","link":"","permalink":"http://example.com/2021/03/04/MarkDown/","excerpt":"","text":"简介markdown是一种轻量级标记语言，文档结尾以 .md或者.markdown结尾。 Markdown标题Markdown标题有两种格式： 分别用=和-标记一级和二级标题，用在需要文字的下方。 用# 表示标题，一个# 表示一级标题，六个# 表示六级标题，一级最大。 markdown段落 markdown没有特殊的段落格式，直接编写文字就行，换行要在末尾至少连个空格然后回车。 字体常用的分三种：斜体，粗体，和斜粗体，分别用1~3个*将文字包围。 分割线你可以在一行中用三个以上的星号，减号，底线表示分割线，这一行不能有别的东西，但是符号只见允许空格。 删除线在文字的两端分别些两个波浪线。 下划线通过html中的尖括号U标签来实现。 注 脚[]之间^文字。 markdown列表 无序列表 用加号，减号，星号以及后边加一个空格 文字的形式表示。 有序列表 用数字后跟点.来表示。 列表嵌套 只需在子列表选项前面添加四个空格即可。 第一项： 元素1 元素2 区块引用1234用&gt;后加一个空格&gt; 最外层&gt;&gt; 第一层&gt;&gt;&gt; 第二层 最外层 第一层 第二层 代码区块 文字中的代码用`包围起来。 代码块用``` 123public static void main(String[] args)&#123;&#125; 代码块也可以用四个空格或者一个制表符markdown中的链接 [链接名称]（链接地址）kaiji’s blog &lt;blog.gsserver.top&gt;直接使用链接地址 高级链接：可以用一个变量来指向链接，以后用到再说。 图片 ![alt 属性文本](图片地址) markdown表格用|分隔单元格，用-分隔表头和其他行。-: :- :-:分别表示右对齐，左对齐，居中对齐。高级技巧markdown支持一些html元素：&lt;kbd&gt; &lt;b&gt; &lt;i&gt; &lt;em&gt; &lt;sup&gt; &lt;sub&gt; &lt;br&gt;等 &lt;kbd&gt;Ctrl&lt;/kbd&gt;+&lt;kbd&gt;Alt&lt;/kbd&gt;+&lt;kbd&gt;Del&lt;/kbd&gt; 重启电脑Ctrl+Alt+Del 重启电脑","categories":[],"tags":[]},{"title":"hexo","slug":"hexo","date":"2021-03-03T01:32:02.000Z","updated":"2021-03-03T02:04:08.030Z","comments":true,"path":"2021/03/03/hexo/","link":"","permalink":"http://example.com/2021/03/03/hexo/","excerpt":"","text":"git svn cvs maven1.git，svn，cvs都是版本控制工具2.git是分布式，每台安装了git的client都是server。svn和cvs是集中式，需要中央服务器。3.cvs比svn老一些。4.maven和其他三个配合使用，主要作用是作为jar包仓库。==============================You have not concluded your merge (MERGE_HEAD exists).Please, commit your changes before you can merge. OK. The problem is your previous pull failed to merge automatically and went to conflict state. And the conflict wasn’t resolved properly before the next pull.git pullgit pushgit add/rm [file]git commitgit merge –abortgit reset –mergegit status===============================hexo ghexo shexo deploy============================i esc :wq======================Debug 通常称为调试版本，它包含调试信息，并且不作任何优化，便于程序员调试程序。Release 称为发布版本，它往往是进行了各种优化，使得程序在代码大小和运行速度上都是最优的，以便用户很好地使用。================Git错误提示之：fatal: Not a git repository (or any of the parent directories): .git产生原因：一般是没有初始化git本地版本管理仓库，所以无法执行git命令 解决方法：操作之前执行以下命令行: git init运行git status查看===============Unable to access ‘https://github.com/user_name/repository_name/’: OpenSSL SSL_read: Connection was reset, errno 10054 网上看到很多说法，其实你之前配置没问题的话我相信一般是没有问题的，你照着他们说的去做也未必能解决问题。当时查资料倒是看到一个有趣的说法，有关于自己的网络连接，我觉得这种思考是很好的，都可以提供大家的参考。 我的问题也给大家分享一下吧，希望给大家排坑提供一种思考的可能：我在本地commit之前在Github直接修改了readme.md的内容，导致本地修改记录和Github修改记录冲突，进而报错。其实之前写的的《Git解决文件本地更改的合并覆盖错误》一文中的弊病原因在哪里呢？就是在 New Repository 的时候点了初始化readme.md，这次创建算是一次commit，但你的本地没有这次记录，所以就会冲突，就不能提交，就必须在pull的时候处理新老版本的兼容问题。 所以处理的方法就是做一下git pull origin master –allow-unrelated-histories，然后再push即可。GitHub Pages自定义域名后每次hexo d都会失效解决在GitHub Pages设置自定义域名之后，发现每次hexo d 后都会失效，又要重新设置，太麻烦了。 于是，问了一下牛皮的百度老师 只要在source 目录添加一个新文件CNAME就好 CNAME –不带任何后缀，这就是全称，里面写的是你的域名 然后就ok了。 怎么push都不用再去GitHub Pages设置了","categories":[],"tags":[]},{"title":"Hello World","slug":"hello-world","date":"2021-03-02T23:55:16.655Z","updated":"2021-03-02T23:55:16.656Z","comments":true,"path":"2021/03/03/hello-world/","link":"","permalink":"http://example.com/2021/03/03/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}],"categories":[],"tags":[]}